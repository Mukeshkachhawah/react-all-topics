Question 1: Handling Multiple API Requests Simultaneously.
Aapko ek API banani hai jo user ke order details aur payment history ko fetch karti hai. Dono endpoints ka response time alag-alag hai. Kaise ensure karenge ki API jaldi se jaldi response de?
Answer : Is problem ko solve karne ke liye hum Promise.all ka use karenge jo dono requests ko ek saath asynchronously execute karega.
const fetchOrderDetails = () => {
  return new Promise((resolve) => setTimeout(() => resolve('Order Details'), 2000));
};

const fetchPaymentHistory = () => {
  return new Promise((resolve) => setTimeout(() => resolve('Payment History'), 3000));
};

async function getUserData() {
  try {
    const [orderDetails, paymentHistory] = await Promise.all([
      fetchOrderDetails(),
      fetchPaymentHistory(),
    ]);
    console.log('User Data:', { orderDetails, paymentHistory });
  } catch (error) {
    console.error('Error fetching data:', error);
  }
}


getUserData();

Question 2.Managing Long-Running Operations
 Aapko ek heavy task execute karna hai jo bahut time leta hai (like file processing). Aapka server block nahi hona chahiye. Kaise handle karenge?
Answer : Heavy computation ke liye worker threads ya child processes ka use karenge taaki event loop block na ho.
const {worker} = require('worker_threads');
function runHeavyTask() {
  return new Promise((resolve, reject) => {
    const worker = new Worker('./heavyTask.js');
    worker.on('message', resolve);
    worker.on('error', reject);
    worker.on('exit', (code) => {
      if (code !== 0) {
        reject(new Error(`Worker stopped with exit code ${code}`));
      }
    });
  });
}

runHeavyTask().then(() => {
  console.log('Heavy task completed without blocking');
});


Question : 3.Rate Limiting an API
Aapko ek API banani hai jisme ek user 1 minute me sirf 5 requests kar sakta hai. Rate limiting kaise implement karenge?
Answer : Rate limiting ke liye express-rate-limit package ka use kar sakte hain.

const express = require('express');
const rateLimit = require('express-rate-limit');

const app = express();

const limiter = rateLimit({
  windowMs: 1 * 60 * 1000, // 1 minute
  max: 5, // Limit each IP to 5 requests per windowMs
});

app.use('/api/', limiter);

app.get('/api/', (req, res) => {
  res.send('API Response');
});

app.listen(3000, () => {
  console.log('Server running on port 3000');
});

Question 4.  Handling Environment-Specific Configurations
Development aur production environment ke liye alag-alag configurations kaise manage karenge?
require('dotenv').config();

const port = process.env.PORT || 3000;
const dbUrl = process.env.DB_URL;

console.log(`Server running on port ${port}`);
console.log(`Connected to database: ${dbUrl}`);


Question 5. Implementing a WebSocket Server
Aapko ek WebSocket server banani hai jisme clients connect kar sakte hain aur messages exchange kar sakte hain. WebSocket server kaise implement karenge?
Answer : WebSocket server ko implement karne ke liye `ws` package ka use kar sakte hain.

const WebSocket = require('ws');

const wss = new WebSocket.Server({ port: 8080 });

step 1 . Create the WebSocket Server Use the ws library to create a WebSocket server.
// websocket-server.js
const WebSocket = require('ws');

const port = 8080;
const server = new WebSocket.Server({ port });

console.log(`WebSocket server running on ws://localhost:${port}`);

// Handle client connections
server.on('connection', (socket) => {
  console.log('New client connected');

  // Receive messages from client
  socket.on('message', (message) => {
    console.log(`Received: ${message}`);

    // Broadcast message to all connected clients
    server.clients.forEach((client) => {
      if (client.readyState === WebSocket.OPEN) {
        client.send(`Server received: ${message}`);
      }
    });
  });

  // Handle client disconnection
  socket.on('close', () => {
    console.log('Client disconnected');
  });

  // Send welcome message
  socket.send('Welcome to the WebSocket server!');
});

step 2.Run the server node websocket-server.js



Question 6.Managing Large File Uploads
Aapko ek server-side API banani hai jo large files upload kar sake. Kaise ensure karenge ki server overload na ho aur file efficiently handle ho?
Answer : Is use case ke liye hum multer ya stream module ka use karenge taaki file streams ko handle kiya ja sake bina server ka memory pressure badhaye.

const express = require('express');
const multer = require('multer');
const app = express();

const storage = multer.diskStorage({
  destination: (req, file, cb) => cb(null, './uploads'),
  filename: (req, file, cb) => cb(null, Date.now() + '-' + file.originalname),
});

const upload = multer({ storage });

app.post('/upload', upload.single('file'), (req, res) => {
  res.send('File uploaded successfully!');
});

app.listen(3000, () => {
  console.log('Server is running on port 3000');
});

Question 7.Aapko nested callbacks use karte hue ek application milti hai. Kaise improve karenge taaki code readable aur maintainable ho?
Answer: Promises ya async/await ka use karenge to avoid callback hell.


Question 8.Authentication with JSON Web Tokens (JWT)
Answer : 
const jwt = require('jsonwebtoken');
const secretKey = 'mySecretKey';

// Generate a token
function generateToken(user) {
  return jwt.sign({ id: user.id, name: user.name }, secretKey, { expiresIn: '1h' });
}

// Verify a token
function verifyToken(token) {
  try {
    const decoded = jwt.verify(token, secretKey);
    console.log('Token is valid:', decoded);
  } catch (error) {
    console.error('Invalid token:', error.message);
  }
}

const token = generateToken({ id: 1, name: 'John Doe' });
console.log('Generated Token:', token);
verifyToken(token);

Question 9. Handling Database Transactions in Node.js
Ek e-commerce application me, aapko ensure karna hai ki order aur payment ka data atomic operations ke roop me store ho. Transactions kaise implement karenge?
Answer: Transactions ke liye databases ke specific transaction APIs ya libraries like Sequelize ka use karte hain.

const { Sequelize, DataTypes } = require('sequelize');
const sequelize = new Sequelize('sqlite::memory:');

async function performTransaction() {
  const t = await sequelize.transaction();
  try {
    await User.create({ name: 'Alice' }, { transaction: t });
    await Order.create({ item: 'Laptop', userId: 1 }, { transaction: t });

    await t.commit();  // Commit transaction
    console.log('Transaction completed successfully!');
  } catch (error) {
    await t.rollback();  // Rollback on error
    console.error('Transaction failed:', error);
  }
}

performTransaction();

Question 10 . Securing an Express Application Against Common Attacks
Aapko ek Express.js application ko common web attacks (like XSS, CSRF, SQL Injection) se secure karna hai. Kaise implement karenge?
method 1. XSS (Cross-Site Scripting) prevention using helmet:
npm install helmet

const helmet = require('helmet');
app.use(helmet());  // Adds security headers

method 2.CSRF (Cross-Site Request Forgery) :
npm install csurf

CSRF token ka use karo (csurf middleware):
const csrf = require('csurf');
const csrfProtection = csrf({ cookie: true });
app.use(csrfProtection);

Har form me CSRF token inject karo:<input type="hidden" name="_csrf" value="<%= csrfToken %>">

SameSite cookies ka use karo: res.cookie('XSRF-TOKEN', req.csrfToken(), { sameSite: 'Strict' });

method 3. XSS (Cross-Site Scripting) Se Protection
XSS attack mein malicious scripts ka injection hota hai jo browser pe run karte hain. Isse bachne ke liye:
xss-clean middleware ko use karo: 
npm install xss-clean

Input ko sanitize karna (XSS-Clean):xss-clean middleware ko use karo:
const xss = require('xss-clean');
app.use(xss());

Helmet.js ka use karo:Helmet HTTP headers ka use karke aapki app ko secure karta hai.
const helmet = require('helmet');
app.use(helmet());

Escape characters ko sanitize karo: : Jab data ko DOM me render kar rahe ho tab input ko escape karo.
const escapedInput = escape(userInput);

method 3.SQL Injection Se Protection
SQL Injection user inputs ko SQL queries me inject karke data ko manipulate karta hai.
Parameterized Queries ka use karo: const userId = req.body.userId;
db.query('SELECT * FROM users WHERE id = ?', [userId], (err, result) => {
  if (err) throw err;
  console.log(result);
});

ORM libraries ka use karo:

Mongoose (MongoDB), Sequelize (MySQL/Postgres) SQL Injection se bachate hain.


Question 11. Aapka project development, staging, aur production environments ke liye alag configurations use karta hai. Kaise manage karenge?
Answer : Using dotenv to manage environment variables:

Create different .env files:
.env.development
.env.production

Question 12.  Implementing Pagination in API
Aapko ek API banani hai jo large datasets return karti hai. Kaise pagination implement karenge?
Answer:app.get('/products', async (req, res) => {
  const page = parseInt(req.query.page) || 1;
  const limit = parseInt(req.query.limit) || 10;
  const offset = (page - 1) * limit;

  const products = await Product.findAll({ limit, offset });
  res.json({ page, limit, data: products });
});

page and limit are query parameters.
offset calculates the starting point for each page.

Question 13. Aapko ek API ke responses cache karne hain taaki performance improve ho. Kaise implement karenge?
Redis caching ka use karenge.npm install redis

const redis = require('redis');
const client = redis.createClient();

app.get('/data', async (req, res) => {
  const cacheData = await client.get('data');
  if (cacheData) {
    return res.json(JSON.parse(cacheData));
  }

  const data = await fetchDataFromDatabase();  // Simulating database fetch
  client.setex('data', 3600, JSON.stringify(data));  // Cache for 1 hour
  res.json(data);
});

Question 14. Kaise ensure karenge ki jab server band ho, to all resources (like database connections) properly close ho jayein?
Answer: Using process events ka use karenge to handle shutdown signals.
const express = require('express');
const app = express();
const PORT = 3000;

const server = app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});

process.on('SIGTERM', () => {
  console.log('Closing server gracefully...');
  server.close(() => {
    console.log('Server closed.');
    process.exit(0);
  });
});

process.on('SIGINT', () => {
  console.log('Interrupt received, shutting down.');
  server.close(() => {
    process.exit(0);
  });
});


Question 15.Ek REST API me file download ka feature kaise implement karenge?
Answer:
res.download ka use karte hain file serve karne ke liye.

app.get('/download', (req, res) => {
  const file = path.join(__dirname, 'sample.pdf');
  res.download(file, 'downloaded.pdf', (err) => {
    if (err) {
      console.error('Error during download:', err);
    }
  });
});

Question 16. Kaise ensure karenge ki multiple asynchronous tasks parallelly execute ho aur completion ke baad ek response return karein?
Answer:
Promise.all ka use karenge.

Question 17. Implementing Logging for an Application
Aapko ek application ke liye proper logging system implement karna hai. Kaise karenge
npm install winston

const winston = require('winston');

const logger = winston.createLogger({
  level: 'info',
  transports: [
    new winston.transports.Console(),
    new winston.transports.File({ filename: 'app.log' }),
  ],
});

logger.info('Application started successfully.');
logger.error('An error occurred.');


Question 18. Avoiding Memory Leaks
Kaise diagnose aur avoid karenge ki application me memory leak na ho?

Memory leaks prevent karne ke liye:

Avoid global variables
Use event emitters carefully and remove unused listeners
Profiling tools ka use karen like Chrome DevTools or Node.js --inspect flag. node --inspect index.js

Use the heapdump module to analyze memory usage:npm install heapdump
const heapdump = require('heapdump');
heapdump.writeSnapshot('./heapdump-' + Date.now() + '.heapsnapshot');

Question 19.nodejs me Static files (like HTML, CSS, images) serve karne ke liye kaun sa module use karenge?
Express.js ke express.static middleware ka use karte hain.

app.use(express.static(path.join(__dirname, 'public')));

Question 20. Handling Form Data in Express : Kaise form data ko POST request me handle karenge?
Answer: express.urlencoded middleware ka use karenge.
app.use(express.urlencoded({ extended: true }));

Question 21. Handling JSON Data in API
Kaise API me JSON request data ko parse karenge?
Answer:
express.json middleware ka use karenge.

Question 22. Agar aapko query parameters read karni hain, to kaise handle karenge?
Answer:
Express mein query parameters ko req.query ke through access karte hain.

app.get('/greet', (req, res) => {
  const name = req.query.name || 'Guest';
  res.send(`Hello, ${name}!`);
});
exmaple :http://localhost:3000/greet?name=John

Question 23.Handling Errors in Express
Express mein error middleware use karte hain.
Answer :app.use((err, req, res, next) => {
  console.error(err.message);
  res.status(500).send('Something went wrong!');
});


Question 24.Kaise server se JSON response bhejenge?
Answer:res.json() method ka use karke JSON data bhejte hain.

Question 25.Kaise ek custom middleware banayenge jo har request ko log kare?
Answer :
// Custom middleware to log request details
app.use((req, res, next) => {
  console.log(`${req.method} request made to ${req.url}`);
  next(); // Pass control to the next middleware or route
});