Question 1: Handling Multiple API Requests Simultaneously.
Aapko ek API banani hai jo user ke order details aur payment history ko fetch karti hai. Dono endpoints ka response time alag-alag hai. Kaise ensure karenge ki API jaldi se jaldi response de?
Answer : Is problem ko solve karne ke liye hum Promise.all ka use karenge jo dono requests ko ek saath asynchronously execute karega.
const fetchOrderDetails = () => {
  return new Promise((resolve) => setTimeout(() => resolve('Order Details'), 2000));
};

const fetchPaymentHistory = () => {
  return new Promise((resolve) => setTimeout(() => resolve('Payment History'), 3000));
};

async function getUserData() {
  try {
    const [orderDetails, paymentHistory] = await Promise.all([
      fetchOrderDetails(),
      fetchPaymentHistory(),
    ]);
    console.log('User Data:', { orderDetails, paymentHistory });
  } catch (error) {
    console.error('Error fetching data:', error);
  }
}


getUserData();

Question 2.Managing Long-Running Operations
 Aapko ek heavy task execute karna hai jo bahut time leta hai (like file processing). Aapka server block nahi hona chahiye. Kaise handle karenge?
Answer : Heavy computation ke liye worker threads ya child processes ka use karenge taaki event loop block na ho.
const {worker} = require('worker_threads');
function runHeavyTask() {
  return new Promise((resolve, reject) => {
    const worker = new Worker('./heavyTask.js');
    worker.on('message', resolve);
    worker.on('error', reject);
    worker.on('exit', (code) => {
      if (code !== 0) {
        reject(new Error(`Worker stopped with exit code ${code}`));
      }
    });
  });
}

runHeavyTask().then(() => {
  console.log('Heavy task completed without blocking');
});


Question : 3.Rate Limiting an API
Aapko ek API banani hai jisme ek user 1 minute me sirf 5 requests kar sakta hai. Rate limiting kaise implement karenge?
Answer : Rate limiting ke liye express-rate-limit package ka use kar sakte hain.

const express = require('express');
const rateLimit = require('express-rate-limit');

const app = express();

const limiter = rateLimit({
  windowMs: 1 * 60 * 1000, // 1 minute
  max: 5, // Limit each IP to 5 requests per windowMs
});

app.use('/api/', limiter);

app.get('/api/', (req, res) => {
  res.send('API Response');
});

app.listen(3000, () => {
  console.log('Server running on port 3000');
});




