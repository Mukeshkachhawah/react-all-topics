React ke saath jab Redux use karte ho, to side effects ko handle karna thoda tricky ho sakta hai. Side effects ka matlab hota hai wo cheezein jo state ke bahar hoti hain â€” jaise API calls, data fetching, ya browser local storage ko update karna. React aur Redux me isko manage karne ke liye kuch best practices aur tools ka use hota hai.

Kaise handle karein side effects Redux ke saath?
1. Redux Thunk ka use karo:
Redux Thunk ek popular middleware hai jo action creators ke andar asynchronous code likhne ki facility 
deta hai.
Example:
    npm install redux-thunk

    Phir store.js me thunk add karo:
    import { createStore, applyMiddleware } from 'redux';
    import thunk from 'redux-thunk';
    import rootReducer from './reducers';

    const store = createStore(rootReducer, applyMiddleware(thunk));

    export default store;

    Async Action likho Thunk se:

    export const fetchUserData = () => {
  return async (dispatch) => {
    dispatch({ type: 'FETCH_USER_REQUEST' });
    try {
      const response = await fetch('https://api.example.com/users');
      const data = await response.json();
      dispatch({ type: 'FETCH_USER_SUCCESS', payload: data });
    } catch (error) {
      dispatch({ type: 'FETCH_USER_FAILURE', error });
    }
  };
};


2. Redux Saga ka use karoz

Redux Saga ek aur middleware hai jo generators ke through complex side effects ko handle karta hai. Ye advanced projects ke liye best hai.

import { call, put, takeEvery } from 'redux-saga/effects';

function* fetchUser(action) {
  try {
    const user = yield call(fetch, `https://api.example.com/user/${action.payload}`);
    const data = yield user.json();
    yield put({ type: 'FETCH_USER_SUCCESS', payload: data });
  } catch (error) {
    yield put({ type: 'FETCH_USER_FAILURE', error });
  }
}

function* mySaga() {
  yield takeEvery('FETCH_USER_REQUEST', fetchUser);
}

3. RTK Query (Redux Toolkit):
Redux Saga ek aur middleware hai jo generators ke through complex side effects ko handle karta hai. Ye advanced projects ke liye best hai.

import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';

const userApi = createApi({
  reducerPath: 'userApi',
  baseQuery: fetchBaseQuery({ baseUrl: '/api' }),
  endpoints: (builder) => ({
    getUser: builder.query({
      query: (id) => `user/${id}`,
    }),
  }),
});

export const { useGetUserQuery } = userApi;

4. Redux Observable (RxJS based)
Redux Observable ek functional reactive programming (FRP) middleware hai jo streams aur events ke through side effects ko handle karta hai.

import { ofType } from 'redux-observable';
import { mapTo } from 'rxjs/operators';

const pingEpic = action$ => action$.pipe(
  ofType('PING'),
  mapTo({ type: 'PONG' })
);

4. Redux Observable (RxJS based):
Redux Observable ek functional reactive programming (FRP) middleware hai jo streams aur events ke through side effects ko handle karta hai.

5. Custom Middleware
const loggerMiddleware = store => next => action => {
  console.log('Dispatching:', action);
  let result = next(action);
  console.log('Next state:', store.getState());
  return result;
};